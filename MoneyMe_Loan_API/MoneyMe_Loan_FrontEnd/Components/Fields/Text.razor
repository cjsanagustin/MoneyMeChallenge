@using System.Linq.Expressions
@using MoneyMe_Loan_FrontEnd.Components.Wrapper

<RMudItem GridWidth="@GridWidth" Class="@RMudItemClass" Style="@RMudItemStyle">
    <MudTextField Required="@Required" id="@id" Class="@Class" HelperText="@HelperText" Style="@Style" Label="@Label" @bind-Value="Value"
                  Margin="Margin.Dense" Variant="ReadonlyVariant" ShrinkLabel 
                  ReadOnly="@ReadOnly" For="@For"
                  Placeholder="@Placeholder"
                  Adornment="@Adornment" AdornmentIcon="@AdornmentIcon" 
                  Lines="@Lines" 
                  Clearable="@Clearable"/>
</RMudItem>

@code {
    [Parameter]
    public string id { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string HelperText { get; set; } = "";

    [Parameter]
    public string RMudItemClass { get; set; } = "pa-1";

    [Parameter]
    public string RMudItemStyle { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public string Placeholder { get; set; } = "";

    [Parameter]
    public bool Required { get; set; } = false;

    [Parameter]
    public bool ConvertToUpper { get; set; } = false;

    [Parameter]
    public Adornment Adornment { get; set; }

    [Parameter]
    public string? AdornmentIcon { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public int Lines { get; set; } = 1;

    [Parameter]
    public Expression<System.Func<string>>? For { get; set; }

    [Parameter]
    public RMudItem.Grid GridWidth { get; set; } = RMudItem.Grid.Whole;

    [Parameter]
    public bool Clearable { get; set; } = false;

    private string _value = "";

    private Variant ReadonlyVariant
    {
        get
        {
            return ReadOnly ? Variant.Filled : Variant.Outlined;
        }
    }

#pragma warning disable BL0007
    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value) return;

            /* Convert to uppercase */
            if (ConvertToUpper)
            {
                _value = (value ?? "").ToUpper();
                ValueChanged.InvokeAsync((value ?? "").ToUpper());
            }
            else
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }
#pragma warning disable BL0007

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

}
